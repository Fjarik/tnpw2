/* tslint:disable */
/* eslint-disable */
import "./custom.d.ts";
/**
 * Contacts API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/ContactsAPI".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        this.configuration = configuration;
        this.basePath = configuration?.basePath || this.basePath;
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: string = "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface BooleanApiResult
 */
export interface BooleanApiResult {
    /**
     * 
     * @type {boolean}
     * @memberof BooleanApiResult
     */
    content?: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof BooleanApiResult
     */
    errors?: Array<string>;
}
/**
 * 
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    nickName?: string;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    number?: string;
    /**
     * 
     * @type {Date}
     * @memberof Contact
     */
    birthDate: Date | null;
    /**
     * 
     * @type {string}
     * @memberof Contact
     */
    userId?: string;
    /**
     * 
     * @type {Image}
     * @memberof Contact
     */
    image?: Image;
    /**
     * 
     * @type {boolean}
     * @memberof Contact
     */
    favourite: boolean;
}
/**
 * 
 * @export
 * @interface ContactApiResult
 */
export interface ContactApiResult {
    /**
     * 
     * @type {Contact}
     * @memberof ContactApiResult
     */
    content?: Contact;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContactApiResult
     */
    errors?: Array<string>;
}
/**
 * 
 * @export
 * @interface ContactListApiResult
 */
export interface ContactListApiResult {
    /**
     * 
     * @type {Array<Contact>}
     * @memberof ContactListApiResult
     */
    content?: Array<Contact>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ContactListApiResult
     */
    errors?: Array<string>;
}
/**
 * 
 * @export
 * @interface ContactModel
 */
export interface ContactModel {
    /**
     * 
     * @type {string}
     * @memberof ContactModel
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ContactModel
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof ContactModel
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactModel
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactModel
     */
    nickName?: string;
    /**
     * 
     * @type {string}
     * @memberof ContactModel
     */
    number?: string;
    /**
     * 
     * @type {Date}
     * @memberof ContactModel
     */
    birthDate?: Date | null;
}
/**
 * 
 * @export
 * @interface FavouriteContactModel
 */
export interface FavouriteContactModel {
    /**
     * 
     * @type {string}
     * @memberof FavouriteContactModel
     */
    id: string;
    /**
     * 
     * @type {boolean}
     * @memberof FavouriteContactModel
     */
    favourite: boolean;
}
/**
 * 
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    base64: string;
    /**
     * 
     * @type {string}
     * @memberof Image
     */
    format: string;
    /**
     * 
     * @type {Date}
     * @memberof Image
     */
    uploaded?: Date;
}
/**
 * 
 * @export
 * @interface LoggedUser
 */
export interface LoggedUser {
    /**
     * 
     * @type {UserModel}
     * @memberof LoggedUser
     */
    user: UserModel;
    /**
     * 
     * @type {string}
     * @memberof LoggedUser
     */
    token: string;
}
/**
 * 
 * @export
 * @interface LoginInput
 */
export interface LoginInput {
    /**
     * 
     * @type {string}
     * @memberof LoginInput
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof LoginInput
     */
    password: string;
}

/**
 * 
 * @export
 * @interface UserModel
 */
export interface UserModel {
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    lastName: string;
}
/**
 * 
 * @export
 * @interface UserRegisterModel
 */
export interface UserRegisterModel {
    /**
     * 
     * @type {string}
     * @memberof UserRegisterModel
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterModel
     */
    userName: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterModel
     */
    firstName: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterModel
     */
    lastName: string;
    /**
     * 
     * @type {string}
     * @memberof UserRegisterModel
     */
    password: string;
}
/**
 * AuthApi - fetch parameter creator
 * @export
 */
export const AuthApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost(options: any = {}): FetchArgs {
            const localVarPath = `/api/Auth/logout`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRegisterModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(body?: UserRegisterModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/Auth/register`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"UserRegisterModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).apiAuthLogoutPost(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {UserRegisterModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(body?: UserRegisterModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<boolean> {
            const localVarFetchArgs = AuthApiFetchParamCreator(configuration).apiAuthRegisterPost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost(options?: any) {
            return AuthApiFp(configuration).apiAuthLogoutPost(options)(fetch, basePath);
        },
        /**
         * 
         * @param {UserRegisterModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(body?: UserRegisterModel, options?: any) {
            return AuthApiFp(configuration).apiAuthRegisterPost(body, options)(fetch, basePath);
        },
    };
};

/**
 * AuthApi - interface
 * @export
 * @interface AuthApi
 */
export interface AuthApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthLogoutPost(options?: any): Promise<boolean>;

    /**
     * 
     * @param {UserRegisterModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    apiAuthRegisterPost(body?: UserRegisterModel, options?: any): Promise<boolean>;

}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI implements AuthApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLogoutPost(options?: any) {
        return AuthApiFp(this.configuration).apiAuthLogoutPost(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {UserRegisterModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthRegisterPost(body?: UserRegisterModel, options?: any) {
        return AuthApiFp(this.configuration).apiAuthRegisterPost(body, options)(this.fetch, this.basePath);
    }

}

/**
 * ContactsApi - fetch parameter creator
 * @export
 */
export const ContactsApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ContactModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsCreateorupdatePost(body?: ContactModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/Contacts/createorupdate`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ContactModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsDeleteDelete(id?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/Contacts/delete`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [contactId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsDelphotoDelete(contactId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/Contacts/delphoto`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (contactId !== undefined) {
                localVarQueryParameter['contactId'] = contactId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsGetallGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/Contacts/getall`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} [body] 
         * @param {string} [contactId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsPhotoPost(body?: File, contactId?: string, options: any = {}): FetchArgs {
            const localVarPath = `/api/Contacts/photo`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (contactId !== undefined) {
                localVarQueryParameter['contactId'] = contactId;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const formData = new FormData();
            formData.append("picture", body as Blob, body?.name);
            localVarRequestOptions.body = formData;

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FavouriteContactModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsSetfavouritePost(body?: FavouriteContactModel, options: any = {}): FetchArgs {
            const localVarPath = `/api/Contacts/setfavourite`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"FavouriteContactModel" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactsApi - functional programming interface
 * @export
 */
export const ContactsApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ContactModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsCreateorupdatePost(body?: ContactModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ContactApiResult> {
            const localVarFetchArgs = ContactsApiFetchParamCreator(configuration).apiContactsCreateorupdatePost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsDeleteDelete(id?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanApiResult> {
            const localVarFetchArgs = ContactsApiFetchParamCreator(configuration).apiContactsDeleteDelete(id, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} [contactId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsDelphotoDelete(contactId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanApiResult> {
            const localVarFetchArgs = ContactsApiFetchParamCreator(configuration).apiContactsDelphotoDelete(contactId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsGetallGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ContactListApiResult> {
            const localVarFetchArgs = ContactsApiFetchParamCreator(configuration).apiContactsGetallGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {File} [body] 
         * @param {string} [contactId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsPhotoPost(body?: File, contactId?: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanApiResult> {
            const localVarFetchArgs = ContactsApiFetchParamCreator(configuration).apiContactsPhotoPost(body, contactId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {FavouriteContactModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsSetfavouritePost(body?: FavouriteContactModel, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BooleanApiResult> {
            const localVarFetchArgs = ContactsApiFetchParamCreator(configuration).apiContactsSetfavouritePost(body, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ContactsApi - factory interface
 * @export
 */
export const ContactsApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {ContactModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsCreateorupdatePost(body?: ContactModel, options?: any) {
            return ContactsApiFp(configuration).apiContactsCreateorupdatePost(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsDeleteDelete(id?: string, options?: any) {
            return ContactsApiFp(configuration).apiContactsDeleteDelete(id, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} [contactId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsDelphotoDelete(contactId?: string, options?: any) {
            return ContactsApiFp(configuration).apiContactsDelphotoDelete(contactId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsGetallGet(options?: any) {
            return ContactsApiFp(configuration).apiContactsGetallGet(options)(fetch, basePath);
        },
        /**
         * 
         * @param {File} [body] 
         * @param {string} [contactId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsPhotoPost(body?: File, contactId?: string, options?: any) {
            return ContactsApiFp(configuration).apiContactsPhotoPost(body, contactId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {FavouriteContactModel} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiContactsSetfavouritePost(body?: FavouriteContactModel, options?: any) {
            return ContactsApiFp(configuration).apiContactsSetfavouritePost(body, options)(fetch, basePath);
        },
    };
};

/**
 * ContactsApi - interface
 * @export
 * @interface ContactsApi
 */
export interface ContactsApiInterface {
    /**
     * 
     * @param {ContactModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    apiContactsCreateorupdatePost(body?: ContactModel, options?: any): Promise<ContactApiResult>;

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    apiContactsDeleteDelete(id?: string, options?: any): Promise<BooleanApiResult>;

    /**
     * 
     * @param {string} [contactId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    apiContactsDelphotoDelete(contactId?: string, options?: any): Promise<BooleanApiResult>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    apiContactsGetallGet(options?: any): Promise<ContactListApiResult>;

    /**
     * 
     * @param {File} [body] 
     * @param {string} [contactId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    apiContactsPhotoPost(body?: File, contactId?: string, options?: any): Promise<BooleanApiResult>;

    /**
     * 
     * @param {FavouriteContactModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApiInterface
     */
    apiContactsSetfavouritePost(body?: FavouriteContactModel, options?: any): Promise<BooleanApiResult>;

}

/**
 * ContactsApi - object-oriented interface
 * @export
 * @class ContactsApi
 * @extends {BaseAPI}
 */
export class ContactsApi extends BaseAPI implements ContactsApiInterface {
    /**
     * 
     * @param {ContactModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public apiContactsCreateorupdatePost(body?: ContactModel, options?: any) {
        return ContactsApiFp(this.configuration).apiContactsCreateorupdatePost(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public apiContactsDeleteDelete(id?: string, options?: any) {
        return ContactsApiFp(this.configuration).apiContactsDeleteDelete(id, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} [contactId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public apiContactsDelphotoDelete(contactId?: string, options?: any) {
        return ContactsApiFp(this.configuration).apiContactsDelphotoDelete(contactId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public apiContactsGetallGet(options?: any) {
        return ContactsApiFp(this.configuration).apiContactsGetallGet(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {File} [body] 
     * @param {string} [contactId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public apiContactsPhotoPost(body?: File, contactId?: string, options?: any) {
        return ContactsApiFp(this.configuration).apiContactsPhotoPost(body, contactId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {FavouriteContactModel} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public apiContactsSetfavouritePost(body?: FavouriteContactModel, options?: any) {
        return ContactsApiFp(this.configuration).apiContactsSetfavouritePost(body, options)(this.fetch, this.basePath);
    }

}
/**
 * UsersApi - fetch parameter creator
 * @export
 */
export const UsersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMeGet(options: any = {}): FetchArgs {
            const localVarPath = `/api/Users/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            // delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMeGet(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<UserModel> {
            const localVarFetchArgs = UsersApiFetchParamCreator(configuration).apiUsersMeGet(options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersMeGet(options?: any) {
            return UsersApiFp(configuration).apiUsersMeGet(options)(fetch, basePath);
        },
    };
};

/**
 * UsersApi - interface
 * @export
 * @interface UsersApi
 */
export interface UsersApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApiInterface
     */
    apiUsersMeGet(options?: any): Promise<UserModel>;

}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI implements UsersApiInterface {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersMeGet(options?: any) {
        return UsersApiFp(this.configuration).apiUsersMeGet(options)(this.fetch, this.basePath);
    }

}
